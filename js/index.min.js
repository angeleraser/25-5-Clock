const incrementBreakLength=()=>({type:TYPES.breakLengthIncrement});const decrementBreakLength=()=>({type:TYPES.breakLengthDecrement});const incrementSessionLength=()=>({type:TYPES.sessionLengthIncrement});const decrementSessionLength=()=>({type:TYPES.sessionLengthDecrement});const toggleTimerStartPause=()=>({type:TYPES.timerToggleStartPause});const timerSetMinutes=e=>({type:TYPES.timerSetMinutes,payload:e});const timerSetConfig=e=>({type:TYPES.timerSetConfig,payload:e});const timerUpdateCurrentTime=(e,t,n)=>({type:TYPES.timerUpdateCurrentTime,payload:{minutes:e,seconds:t,length:n}});const resetClockTimer=()=>({type:TYPES.clockResetAllValues});const breakLengthControllerHTML=document.querySelector("#break-length-controller"),sessionLengthControllerHTML=document.querySelector("#session-length-controller"),LengthController=(e,t)=>{const n=e.querySelector(".increment"),r=e.querySelector(".decrement"),s=e.querySelector("h2");return{addClickEventListener({increment:e,decrement:s}){n.addEventListener("click",()=>{getState().clock.isRunning||getState().clock[`${t}`].length<60&&(e(),this.updateCurrentConfig())}),r.addEventListener("click",()=>{getState().clock.isRunning||getState().clock[`${t}`].length>1&&(s(),this.updateCurrentConfig())})},updateLength(e){s.textContent=e},updateCurrentConfig(){getState().clock.current.name===t&&dispatch(timerUpdateCurrentTime(getState().clock[`${t}`].minutes,getState().clock[`${t}`].seconds,getState().clock[`${t}`].length))}}};const breakLengthController=LengthController(breakLengthControllerHTML,"break");const sessionLengthController=LengthController(sessionLengthControllerHTML,"session");const timerHTML=document.querySelector("#timer");let interval=null;const Timer=e=>{const t=e.querySelector("header"),n=e.querySelector(".time-left"),r=e.querySelector(".start-stop"),s=e.querySelector("#beep"),o=e.querySelector(".reset");return{update(e){n.textContent=e},updateHeader(e){t.textContent=e},addClickEventListener(){r.addEventListener("click",()=>{getState().clock.isRunning?clearInterval(interval):this.initializeInterval(),dispatch(toggleTimerStartPause())}),o.addEventListener("click",()=>{clearInterval(interval),this.updateHeader("Session"),dispatch(resetClockTimer()),s.pause(),s.currentTime=0})},initializeInterval(){interval=setInterval(()=>{if(getState().clock.isRunning){const e=getState().clock;let{minutes:t,seconds:n,name:r,length:s}=e.current;if(0===t&&0===n){switch(r){case"break":this.updateHeader("Session");break;case"session":this.updateHeader("Break")}const o=e.session;if(this.playBeepSound(),r===o.name){const r=e.break;dispatch(timerSetConfig({...r})),t=r.minutes,n=r.seconds,s=r.length}else dispatch(timerSetConfig({...o})),t=o.minutes,n=o.seconds,s=o.length}else t>0&&60===n&&(t-=1),n>0?n-=1:n=60,dispatch(timerUpdateCurrentTime(t,n,s))}},1e3)},playBeepSound(){s.currentTime=0,s.play()}}};const ClockTimer=Timer(timerHTML);const getParsedTime=(e,t)=>{const n=2===(e+"").length?e:`0${e}`,r=2===(t+"").length?60===t?"00":t:`0${t}`;return`${n}:${r}`};const TYPES={sessionLengthIncrement:"[Clock] Session length increment",sessionLengthDecrement:"[Clock] Session length decrement",breakLengthDecrement:"[Clock] Break length decrement",breakLengthIncrement:"[Clock] Break length increment",clockResetAllValues:"[Clock] Reset all values",timerUpdateMinutes:"[Clock] Timer update minutes",timerUpdateCurrentTime:"[Clock] Timer upadte current time",timerSetConfig:"[Clock] Timer Set config",timerToggleStartPause:"[Clock] Timer toggle start/pause",timerUpdateSeconds:"[Clock] Timer update seconds"};const initState={break:{name:"break",length:5,minutes:5,seconds:60},session:{name:"session",length:25,minutes:25,seconds:60},current:null,isRunning:!1};const clockReducer=(e=initState,t)=>{switch(t.type){case TYPES.breakLengthIncrement:return{...e,break:{...e.break,length:e.break.length+1,minutes:e.break.minutes+1}};case TYPES.breakLengthDecrement:return{...e,break:{...e.break,length:e.break.length-1,minutes:e.break.minutes-1}};case TYPES.sessionLengthIncrement:return{...e,session:{...e.session,minutes:e.session.minutes+1,length:e.session.length+1}};case TYPES.sessionLengthDecrement:return{...e,session:{...e.session,length:e.session.length-1,minutes:e.session.minutes-1}};case TYPES.timerToggleStartPause:return{...e,isRunning:!e.isRunning};case TYPES.timerUpdateCurrentTime:return{...e,current:{...e.current,...t.payload}};case TYPES.timerSetConfig:return{...e,current:{...t.payload}};case TYPES.clockResetAllValues:return{...initState,current:{...initState.session}};default:return e}};const{createStore:createStore,combineReducers:combineReducers}=Redux,store=createStore(combineReducers({clock:clockReducer}));const{subscribe:onUpdateStore,getState:getState,dispatch:dispatch}=store;const render=()=>{const e=getState().clock;sessionLengthController.updateLength(e.session.length),breakLengthController.updateLength(e.break.length);const{minutes:t,seconds:n,name:r}=e.current;0===t&&0===n?ClockTimer.update(getParsedTime(0,0)):ClockTimer.update(getParsedTime(t,n)),console.log(r,getParsedTime(t,n))};onUpdateStore(render),dispatch(timerSetConfig({...getState().clock.session})),ClockTimer.addClickEventListener(),sessionLengthController.addClickEventListener({increment(){dispatch(incrementSessionLength())},decrement(){dispatch(decrementSessionLength())}}),breakLengthController.addClickEventListener({increment(){dispatch(incrementBreakLength())},decrement(){dispatch(decrementBreakLength())}});